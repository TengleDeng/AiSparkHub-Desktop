name: Build macOS App

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build-macos:
    runs-on: macos-latest  # 使用最新的macOS runner
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # 使用requirements.txt安装所有依赖项
        pip install -r requirements.txt
        # 安装PyInstaller (如果requirements.txt中没有)
        pip install PyInstaller
        # 安装其他macOS特定依赖
        brew install create-dmg
        # 确认WebEngine组件已安装
        python -c "from PyQt6 import QtWebEngineWidgets; print('QtWebEngine组件安装成功')" || pip install PyQt6-WebEngine
        
    - name: Prepare app version
      id: app_version
      run: |
        # 如果是tag触发，使用tag作为版本号，否则使用日期作为版本号
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(date +'%Y.%m.%d')
        fi
        echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
      
    - name: Create icns icon
      run: |
        # 确保icons目录存在
        mkdir -p icons
        
        # 检查是否已有.icns格式图标
        if [ ! -f "icons/app.icns" ]; then
          echo "创建默认应用图标..."
          
          # 尝试使用已有的图标文件
          if [ -f "icons/chatglm.ico" ]; then
            echo "使用已有的chatglm.ico转换为icns..."
            # 安装必要工具
            brew install imagemagick
            # 转换ico到png
            convert "icons/chatglm.ico" "icons/app.png"
          else
            echo "创建默认PNG图标..."
            # 创建一个简单的蓝色方块作为默认图标
            # 安装必要工具
            brew install imagemagick
            convert -size 1024x1024 xc:blue "icons/app.png" || {
              echo "无法使用convert创建图标，创建空白图标..."
              # 如果转换失败，创建空白文件
              touch "icons/app.png"
            }
          fi
          
          # 创建图标集
          mkdir -p AppIcon.iconset
          
          # 如果app.png存在且有效，使用它创建不同尺寸的图标
          if [ -f "icons/app.png" ] && [ -s "icons/app.png" ]; then
            # 创建不同尺寸的图标
            sips -z 16 16 "icons/app.png" --out AppIcon.iconset/icon_16x16.png || cp "icons/app.png" AppIcon.iconset/icon_16x16.png
            sips -z 32 32 "icons/app.png" --out AppIcon.iconset/icon_32x32.png || cp "icons/app.png" AppIcon.iconset/icon_32x32.png
            sips -z 128 128 "icons/app.png" --out AppIcon.iconset/icon_128x128.png || cp "icons/app.png" AppIcon.iconset/icon_128x128.png
            sips -z 256 256 "icons/app.png" --out AppIcon.iconset/icon_256x256.png || cp "icons/app.png" AppIcon.iconset/icon_256x256.png
            sips -z 512 512 "icons/app.png" --out AppIcon.iconset/icon_512x512.png || cp "icons/app.png" AppIcon.iconset/icon_512x512.png
          else
            # 创建空白图标文件
            for size in 16 32 128 256 512; do
              touch AppIcon.iconset/icon_${size}x${size}.png
            done
          fi
          
          # 尝试生成icns文件
          iconutil -c icns AppIcon.iconset -o icons/app.icns || {
            echo "图标转换失败，创建空白icns文件..."
            # 创建一个空图标文件作为后备
            touch icons/app.icns
          }
          
          # 清理临时文件
          rm -rf AppIcon.iconset
        fi
        
    - name: Check main.py exists
      run: |
        if [ ! -f "main.py" ]; then
          echo "错误: main.py 文件不存在！"
          exit 1
        fi
        
    - name: Create build wrapper
      run: |
        # 创建一个简单的构建包装脚本，确保WebEngine组件安装
        cat > build_wrapper.py << 'EOF'
        #!/usr/bin/env python3
        # -*- coding: utf-8 -*-
        
        import os
        import sys
        import subprocess
        
        def main():
            try:
                app_name = "AiSparkHub"
                app_version = os.environ.get("APP_VERSION", "1.0.0")
                print(f"Starting build for {app_name} v{app_version}")
                
                # 验证关键组件是否已安装
                try:
                    from PyQt6 import QtWebEngineWidgets
                    print("WebEngine组件已安装")
                except ImportError as e:
                    print(f"警告: {e}")
                    print("尝试安装WebEngine组件...")
                    subprocess.check_call([sys.executable, "-m", "pip", "install", "PyQt6-WebEngine"])
                
                # 调用原始build.py
                cmd = [sys.executable, "build.py", app_name, app_version]
                subprocess.check_call(cmd)
                
                print(f"Build completed successfully.")
                return 0
            except Exception as e:
                print(f"Error during build process: {e}")
                import traceback
                traceback.print_exc()
                return 1
        
        if __name__ == "__main__":
            sys.exit(main())
        EOF
        chmod +x build_wrapper.py
        
    - name: Build macOS application
      run: |
        # 使用包装脚本运行构建过程
        python build_wrapper.py
        
    - name: List build outputs
      run: |
        echo "检查构建输出文件..."
        find installer -type f
        find dist -type f
        
    - name: Upload DMG artifact
      uses: actions/upload-artifact@v4
      with:
        name: AiSparkHub-macOS-${{ steps.app_version.outputs.version }}
        path: |
          installer/*.dmg
          dist/*.app
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          installer/AiSparkHub_v${{ env.APP_VERSION }}.dmg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 