name: Build macOS App

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build-macos:
    runs-on: macos-latest  # 使用最新的macOS runner
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyQt6 qtawesome PyInstaller pynput
        brew install create-dmg
        
    - name: Prepare app version
      id: app_version
      run: |
        # 如果是tag触发，使用tag作为版本号，否则使用日期作为版本号
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(date +'%Y.%m.%d')
        fi
        echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
      
    - name: Create icns icon
      run: |
        # 确保icons目录存在
        mkdir -p icons
        
        # 检查是否已有.icns格式图标
        if [ ! -f "icons/app.icns" ]; then
          echo "创建默认应用图标..."
          
          # 尝试使用已有的图标文件
          if [ -f "icons/chatglm.ico" ]; then
            echo "使用已有的chatglm.ico转换为icns..."
            # 安装必要工具
            brew install imagemagick
            # 转换ico到png
            convert "icons/chatglm.ico" "icons/app.png"
          else
            echo "创建默认PNG图标..."
            # 创建一个简单的蓝色方块作为默认图标
            # 安装必要工具
            brew install imagemagick
            convert -size 1024x1024 xc:blue "icons/app.png" || {
              echo "无法使用convert创建图标，创建空白图标..."
              # 如果转换失败，创建空白文件
              touch "icons/app.png"
            }
          fi
          
          # 创建图标集
          mkdir -p AppIcon.iconset
          
          # 如果app.png存在且有效，使用它创建不同尺寸的图标
          if [ -f "icons/app.png" ] && [ -s "icons/app.png" ]; then
            # 创建不同尺寸的图标
            sips -z 16 16 "icons/app.png" --out AppIcon.iconset/icon_16x16.png || cp "icons/app.png" AppIcon.iconset/icon_16x16.png
            sips -z 32 32 "icons/app.png" --out AppIcon.iconset/icon_32x32.png || cp "icons/app.png" AppIcon.iconset/icon_32x32.png
            sips -z 128 128 "icons/app.png" --out AppIcon.iconset/icon_128x128.png || cp "icons/app.png" AppIcon.iconset/icon_128x128.png
            sips -z 256 256 "icons/app.png" --out AppIcon.iconset/icon_256x256.png || cp "icons/app.png" AppIcon.iconset/icon_256x256.png
            sips -z 512 512 "icons/app.png" --out AppIcon.iconset/icon_512x512.png || cp "icons/app.png" AppIcon.iconset/icon_512x512.png
          else
            # 创建空白图标文件
            for size in 16 32 128 256 512; do
              touch AppIcon.iconset/icon_${size}x${size}.png
            done
          fi
          
          # 尝试生成icns文件
          iconutil -c icns AppIcon.iconset -o icons/app.icns || {
            echo "图标转换失败，创建空白icns文件..."
            # 创建一个空图标文件作为后备
            touch icons/app.icns
          }
          
          # 清理临时文件
          rm -rf AppIcon.iconset
        fi
        
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install Node.js dependencies
      run: |
        if [ -f "package.json" ]; then
          npm install
        fi
        
    - name: Check main.js exists
      run: |
        if [ ! -f "main.js" ]; then
          echo "错误: main.js 文件不存在！"
          exit 1
        fi
        
    - name: Build macOS application
      run: |
        # 运行build.py脚本构建.app和.dmg
        python build.py AiSparkHub ${{ env.APP_VERSION }}
        
    - name: Upload DMG artifact
      uses: actions/upload-artifact@v4
      with:
        name: AiSparkHub-macOS-${{ steps.app_version.outputs.version }}
        path: installer/AiSparkHub_v${{ env.APP_VERSION }}.dmg
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          installer/AiSparkHub_v${{ env.APP_VERSION }}.dmg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 