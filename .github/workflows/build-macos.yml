name: Build macOS App

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build-macos:
    runs-on: macos-latest  # 使用最新的macOS runner
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyQt6 qtawesome PyInstaller pynput
        brew install create-dmg
        
    - name: Prepare app version
      id: app_version
      run: |
        # 如果是tag触发，使用tag作为版本号，否则使用日期作为版本号
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(date +'%Y.%m.%d')
        fi
        echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
      
    - name: Create icns icon
      run: |
        # 确保icons目录存在
        mkdir -p icons
        
        # 检查是否已有.icns或.png格式图标
        if [ ! -f "icons/app.icns" ] && [ ! -f "icons/app.png" ]; then
          # 如果没有图标，创建一个简单的默认图标
          echo "创建默认应用图标..."
          # 使用base64编码的简单PNG图标
          ICON_DATA="iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAMAAABrrFhUAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAVFBMVEUAAAD/xVD/xVD/xVD/xVD/xVD/xVD/xVD/xVD/xVD/xVD/xVD/xVD/xVD/xVD/xVD/xVD/xVD/xVD/xVD/xVD/xVD/xVD/xVD/xVD/xVD/xVAAAACaT0UgAAAAGnRSTlMAEEBwj6/P3++fYI9wQCDv38+vYFAggECwcFcGXLQAAAABYktHRACIBR1IAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAB3RJTUUH5wUSEgIa3cnV9QAAAydJREFUeNrt3NtuwjAQBVCCJRrKpUBb8P//Z1W3Vo0xOGZm9nG/VvKJjxUnkWvdVKt12Nev5f9/iaPfnONytK1iyXc59OMi+V+N477raAYgHeO88Mf0dYxLv5FnWfqKgAfvS7+PGwA8+DavN7+ZGgDm2vr35ndzA4D/4Rsz+JsHAA+Dv/sCQQD4HX5kDgB/w4/NAcBdPjAIgLRvP/7yLAD+zoQ5AEg3/0V/B8C/MFw+BUhf/mPTmAaATX94CuDuX1PzAJA2Hz9uzAMALo3vvgD4HABW9dEXAN8CQPoywDUA+BIg7fcvAK4CQLo2XvsCuA4Aa3vvC+BKAKTXxsYXwLUAWNdbXwDXAyBdGz0vAD4AIH0ZDL4AfAFg1Z/5AnALAPc1XwD4BgDpoU+9APgIgHXd8wLgMwCky2PtCcB3AKzrlScAHwLgtgboAsC3AEjXRuMFwNcArOtqeST0x+2bAO7a+PfToX8BQPoymP9W4G8AWNVzALcDIF0b05cBtwQgXRrzl0E3BSB9GfwHcFsAWNXTT4HbA5AujcP8UfhGAVjV46fwzQKQrhdmACDdL88AuPsOPQIA/jCXP4ztnwbwx/n886D+hRC/FOaXgvxymF8O88thdkHULwn7RXG/LO4Xxr3SuFcc94rjfnmcXyDnl8j5RXJ+mZxfKOeXyvnFcrtczitY8Ep2vKIlr2zJK9zySpessm2neKIon+tKJ9sSksaAhKolomiOKBrEyibZolm6apivG+brhvm6Yb5umK8bZuumuZpxqmocqxoHm+axqnmwbJ6smyfr5sm6ebJunq0aR8vmwbJ5sGweLJsHy+bBsnmwbB6smierxsmqcbJqnKwax6rmubJtrmybK9tmqsZ5QJBURhOgSIe5mkGmZI6p+SJqnoiaH6Lmg6jZP2q2j5rNo2bvqNk6anaOGoBjZtuY2TRmtoyd7WJnr9jZKX62iZ9N4meP+NkifragYoOIGSBi9oeY7SFmd4jZHGI2h5i9IWZriNkaYjaGHG0NqNYPrDUDbr0Ae60AfI0AfH0Af20EfF0MfE0UfD0cek3FehuLvpYWfx01/lp6/OsI8tdQ5IexKXLFxg83pE2JGSH5XQAAAABJRU5ErkJggg=="
          echo $ICON_DATA | base64 --decode > icons/app.png
        fi
        
        # 如果存在PNG但没有icns，创建icns文件
        if [ ! -f "icons/app.icns" ] && [ -f "icons/app.png" ]; then
          # 创建iconset目录
          mkdir -p AppIcon.iconset
          
          # 从现有PNG生成不同尺寸的图标
          sips -z 16 16 icons/app.png --out AppIcon.iconset/icon_16x16.png
          sips -z 32 32 icons/app.png --out AppIcon.iconset/icon_16x16@2x.png
          sips -z 32 32 icons/app.png --out AppIcon.iconset/icon_32x32.png
          sips -z 64 64 icons/app.png --out AppIcon.iconset/icon_32x32@2x.png
          sips -z 128 128 icons/app.png --out AppIcon.iconset/icon_128x128.png
          sips -z 256 256 icons/app.png --out AppIcon.iconset/icon_128x128@2x.png
          sips -z 256 256 icons/app.png --out AppIcon.iconset/icon_256x256.png
          sips -z 512 512 icons/app.png --out AppIcon.iconset/icon_256x256@2x.png
          sips -z 512 512 icons/app.png --out AppIcon.iconset/icon_512x512.png
          sips -z 1024 1024 icons/app.png --out AppIcon.iconset/icon_512x512@2x.png
          
          # 生成icns文件
          iconutil -c icns AppIcon.iconset
          
          # 移动到icons目录
          mv AppIcon.icns icons/app.icns
          
          # 清理临时文件
          rm -rf AppIcon.iconset
        fi
        
    - name: Ensure main.py exists
      run: |
        # 如果main.py不存在，创建一个最小的main.py示例文件
        if [ ! -f "main.py" ]; then
          echo "创建示例main.py文件..."
          echo '#!/usr/bin/env python3' > main.py
          echo '# -*- coding: utf-8 -*-' >> main.py
          echo '' >> main.py
          echo 'import sys' >> main.py
          echo 'import os' >> main.py
          echo 'from PyQt6.QtWidgets import QApplication, QMainWindow, QLabel, QVBoxLayout, QWidget' >> main.py
          echo 'from PyQt6.QtCore import Qt' >> main.py
          echo '' >> main.py
          echo 'class MainWindow(QMainWindow):' >> main.py
          echo '    def __init__(self):' >> main.py
          echo '        super().__init__()' >> main.py
          echo '        self.setWindowTitle("AiSparkHub")' >> main.py
          echo '        self.setMinimumSize(800, 600)' >> main.py
          echo '        ' >> main.py
          echo '        # 创建中央窗口部件' >> main.py
          echo '        central_widget = QWidget()' >> main.py
          echo '        self.setCentralWidget(central_widget)' >> main.py
          echo '        ' >> main.py
          echo '        # 创建布局' >> main.py
          echo '        layout = QVBoxLayout(central_widget)' >> main.py
          echo '        ' >> main.py
          echo '        # 添加标签' >> main.py
          echo '        label = QLabel("AiSparkHub - 欢迎使用!")' >> main.py
          echo '        label.setAlignment(Qt.AlignmentFlag.AlignCenter)' >> main.py
          echo '        label.setStyleSheet("font-size: 24px; font-weight: bold;")' >> main.py
          echo '        layout.addWidget(label)' >> main.py
          echo '        ' >> main.py
          echo '        # 添加说明' >> main.py
          echo '        info_label = QLabel("这是一个示例程序，用于测试macOS打包功能")' >> main.py
          echo '        info_label.setAlignment(Qt.AlignmentFlag.AlignCenter)' >> main.py
          echo '        layout.addWidget(info_label)' >> main.py
          echo '' >> main.py
          echo 'def main():' >> main.py
          echo '    app = QApplication(sys.argv)' >> main.py
          echo '    window = MainWindow()' >> main.py
          echo '    window.show()' >> main.py
          echo '    sys.exit(app.exec())' >> main.py
          echo '' >> main.py
          echo 'if __name__ == "__main__":' >> main.py
          echo '    main()' >> main.py
        fi
        
    - name: Build macOS application
      run: |
        # 运行build.py脚本构建.app和.dmg
        python build.py AiSparkHub ${{ env.APP_VERSION }}
        
    - name: Upload DMG artifact
      uses: actions/upload-artifact@v4
      with:
        name: AiSparkHub-macOS-${{ steps.app_version.outputs.version }}
        path: installer/AiSparkHub_v${{ env.APP_VERSION }}.dmg
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          installer/AiSparkHub_v${{ env.APP_VERSION }}.dmg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 