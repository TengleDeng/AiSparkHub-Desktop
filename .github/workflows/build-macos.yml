name: Build macOS App

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build-macos:
    runs-on: macos-latest  # 使用最新的macOS runner
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # 卸载可能与PyInstaller冲突的pathlib包
        pip uninstall -y pathlib
        # 使用requirements.txt安装所有依赖项，但排除pathlib
        grep -v "^pathlib==" requirements.txt > requirements_fixed.txt || cp requirements.txt requirements_fixed.txt
        pip install -r requirements_fixed.txt
        # 安装特定版本的Pillow以解决通用二进制问题
        pip install --force-reinstall Pillow
        # 明确安装关键依赖
        pip install PyInstaller pynput PyQt6-WebEngine --force-reinstall
        # 安装其他macOS特定依赖
        brew install create-dmg
        # 确认WebEngine组件已安装
        python -c "from PyQt6 import QtWebEngineWidgets; print('QtWebEngine组件安装成功')" || pip install PyQt6-WebEngine
        # 确认pynput组件已安装
        python -c "import pynput; print('pynput模块安装成功')" || pip install pynput
        # 确认pathlib可以正常导入（使用标准库版本）
        python -c "import pathlib; print('使用Python标准库的pathlib模块')"
        # 输出系统架构信息
        python -c "import platform; print('当前系统架构:', platform.machine())"
        
    - name: Prepare app version
      id: app_version
      run: |
        # 如果是tag触发，使用tag作为版本号，否则使用日期作为版本号
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(date +'%Y.%m.%d')
        fi
        echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
      
    - name: Create icns icon
      run: |
        # 确保icons目录存在
        mkdir -p icons
        
        # 检查是否已有.icns格式图标
        if [ ! -f "icons/app.icns" ]; then
          echo "创建默认应用图标..."
          
          # 尝试使用已有的图标文件
          if [ -f "icons/chatglm.ico" ]; then
            echo "使用已有的chatglm.ico转换为icns..."
            # 安装必要工具
            brew install imagemagick
            # 转换ico到png
            convert "icons/chatglm.ico" "icons/app.png"
          else
            echo "创建默认PNG图标..."
            # 创建一个简单的蓝色方块作为默认图标
            # 安装必要工具
            brew install imagemagick
            convert -size 1024x1024 xc:blue "icons/app.png" || {
              echo "无法使用convert创建图标，创建空白图标..."
              # 如果转换失败，创建空白文件
              touch "icons/app.png"
            }
          fi
          
          # 创建图标集
          mkdir -p AppIcon.iconset
          
          # 如果app.png存在且有效，使用它创建不同尺寸的图标
          if [ -f "icons/app.png" ] && [ -s "icons/app.png" ]; then
            # 创建不同尺寸的图标
            sips -z 16 16 "icons/app.png" --out AppIcon.iconset/icon_16x16.png || cp "icons/app.png" AppIcon.iconset/icon_16x16.png
            sips -z 32 32 "icons/app.png" --out AppIcon.iconset/icon_32x32.png || cp "icons/app.png" AppIcon.iconset/icon_32x32.png
            sips -z 128 128 "icons/app.png" --out AppIcon.iconset/icon_128x128.png || cp "icons/app.png" AppIcon.iconset/icon_128x128.png
            sips -z 256 256 "icons/app.png" --out AppIcon.iconset/icon_256x256.png || cp "icons/app.png" AppIcon.iconset/icon_256x256.png
            sips -z 512 512 "icons/app.png" --out AppIcon.iconset/icon_512x512.png || cp "icons/app.png" AppIcon.iconset/icon_512x512.png
          else
            # 创建空白图标文件
            for size in 16 32 128 256 512; do
              touch AppIcon.iconset/icon_${size}x${size}.png
            done
          fi
          
          # 尝试生成icns文件
          iconutil -c icns AppIcon.iconset -o icons/app.icns || {
            echo "图标转换失败，创建空白icns文件..."
            # 创建一个空图标文件作为后备
            touch icons/app.icns
          }
          
          # 清理临时文件
          rm -rf AppIcon.iconset
        fi
        
    - name: Check main.py exists
      run: |
        if [ ! -f "main.py" ]; then
          echo "错误: main.py 文件不存在！"
          exit 1
        fi
        
    - name: Create build wrapper
      run: |
        # 创建一个简单的构建包装脚本，直接控制PyInstaller执行
        cat > build_wrapper.py << 'EOF'
        #!/usr/bin/env python3
        # -*- coding: utf-8 -*-
        
        import os
        import sys
        import subprocess
        import platform
        import shutil
        from pathlib import Path
        
        def check_and_install_module(module_name):
            try:
                __import__(module_name)
                print(f"{module_name} 模块已安装")
                return True
            except ImportError:
                print(f"正在安装 {module_name} 模块...")
                subprocess.check_call([sys.executable, "-m", "pip", "install", module_name, "--force-reinstall"])
                return __import__(module_name) is not None
        
        def ensure_dir(directory):
            """确保目录存在"""
            Path(directory).mkdir(parents=True, exist_ok=True)
        
        def main():
            try:
                # 检查pathlib冲突
                try:
                    subprocess.check_call([sys.executable, "-m", "pip", "uninstall", "-y", "pathlib"])
                    print("已卸载冲突的pathlib包")
                except:
                    print("无需卸载pathlib包")
                
                # 应用信息
                app_name = "AiSparkHub"
                app_version = os.environ.get("APP_VERSION", "1.0.0")
                print(f"开始构建 {app_name} v{app_version}")
                
                # 确保必要的目录存在
                ensure_dir("app/resources")
                ensure_dir("app/static")
                ensure_dir("app/search")
                ensure_dir("installer")
                
                # 验证关键依赖
                check_and_install_module("PyQt6")
                check_and_install_module("pynput")
                
                # 验证WebEngine组件
                try:
                    from PyQt6 import QtWebEngineWidgets
                    print("WebEngine组件已安装")
                except ImportError as e:
                    print(f"警告: {e}")
                    print("尝试安装WebEngine组件...")
                    subprocess.check_call([sys.executable, "-m", "pip", "install", "PyQt6-WebEngine", "--force-reinstall"])
                
                # 获取当前系统架构
                current_arch = platform.machine()
                print(f"当前系统架构: {current_arch}")
                
                # 检查.icns图标
                icon_path = "icons/app.icns"
                if not os.path.exists(icon_path):
                    print(f"警告: {icon_path} 不存在")
                    icon_path = ""
                
                # 创建版本信息文件
                with open("version.txt", "w") as f:
                    f.write(f"version={app_version}\n")
                    f.write("company=AiSparkHub\n")
                    f.write("product=AiSparkHub Desktop\n")
                print("使用版本信息文件: version.txt")
                
                # 直接构建PyInstaller命令
                pyinstaller_cmd = [
                    sys.executable, '-m', 'PyInstaller',
                    '--name', app_name,
                    '--windowed', 
                    '--noconfirm', 
                    '--clean',
                    '--log-level', 'INFO',
                    '--onedir',
                    '--osx-bundle-identifier', 'com.aisparkhub.desktop',
                    f'--target-architecture={current_arch}'  # 使用检测到的架构
                ]
                
                # 添加图标如果存在
                if icon_path:
                    pyinstaller_cmd.append(f'--icon={icon_path}')
                
                # 添加数据文件
                data_mappings = [
                    ('app/resources', 'app/resources'),
                    ('app/static', 'app/static'),
                    ('app/search', 'app/search'),
                    ('icons', 'icons')
                ]
                
                for src, dst in data_mappings:
                    if os.path.exists(src):
                        pyinstaller_cmd.extend(['--add-data', f'{src}:{dst}'])
                
                # 添加隐藏导入
                hidden_imports = [
                    'PyQt6.QtCore', 'PyQt6.QtWidgets', 'PyQt6.QtGui',
                    'PyQt6.QtWebEngineWidgets', 'PyQt6.QtWebEngineCore',
                    'qtawesome', 'qtpy', 'sqlite3', 'pynput',
                    'pynput.keyboard._darwin', 'pynput.mouse._darwin'
                ]
                
                for module in hidden_imports:
                    pyinstaller_cmd.extend(['--hidden-import', module])
                
                # 收集所有模块
                for module in ['qtawesome', 'pynput']:
                    pyinstaller_cmd.extend(['--collect-all', module])
                
                # 添加主脚本
                pyinstaller_cmd.append('main.py')
                
                # 打印完整命令
                print("执行PyInstaller命令:")
                print(" ".join(pyinstaller_cmd))
                
                # 执行PyInstaller
                subprocess.check_call(pyinstaller_cmd)
                
                # 创建DMG文件
                dist_path = os.path.join("dist", app_name)
                if os.path.exists(dist_path):
                    dmg_name = f"{app_name}_v{app_version}.dmg"
                    dmg_path = os.path.join("installer", dmg_name)
                    
                    print(f"创建DMG安装包: {dmg_path}")
                    
                    try:
                        # 确保installer目录存在
                        ensure_dir("installer")
                        
                        # 使用create-dmg工具创建DMG
                        subprocess.check_call([
                            "create-dmg",
                            "--volname", f"{app_name} Installer",
                            "--volicon", icon_path if os.path.exists(icon_path) else "icons/app.icns",
                            "--window-pos", "200", "100",
                            "--window-size", "800", "400",
                            "--icon-size", "100",
                            "--icon", f"{app_name}.app", "200", "200",
                            "--hide-extension", f"{app_name}.app",
                            "--app-drop-link", "600", "200",
                            dmg_path,
                            dist_path
                        ])
                        print(f"DMG创建成功: {dmg_path}")
                    except Exception as e:
                        print(f"DMG创建失败: {e}")
                        # 如果DMG创建失败，尝试直接复制应用程序
                        shutil.make_archive(
                            os.path.join("installer", f"{app_name}_v{app_version}"),
                            'zip',
                            "dist",
                            app_name
                        )
                        print(f"已创建备用ZIP包: installer/{app_name}_v{app_version}.zip")
                
                print(f"构建完成")
                return 0
            except Exception as e:
                print(f"构建过程中出错: {e}")
                import traceback
                traceback.print_exc()
                return 1
        
        if __name__ == "__main__":
            sys.exit(main())
        EOF
        chmod +x build_wrapper.py
        
    - name: List dist contents
      run: |
        echo "列出 dist 目录内容："
        ls -l dist || true
        echo "列出 dist/AiSparkHub.app 目录内容："
        ls -l dist/AiSparkHub.app || true
        echo "列出 dist/AiSparkHub 目录内容："
        ls -l dist/AiSparkHub || true

    - name: Build macOS application
      run: |
        # 使用专用脚本进行macOS打包
        python build-macos.py AiSparkHub ${{ env.APP_VERSION }}

    - name: List build outputs
      run: |
        echo "检查构建输出文件..."
        find installer -type f || echo "installer目录不存在或为空"
        find dist -type f || echo "dist目录不存在或为空"
        
    - name: Upload DMG artifact
      uses: actions/upload-artifact@v4
      with:
        name: AiSparkHub-macOS-${{ steps.app_version.outputs.version }}
        path: installer/*.dmg
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          installer/AiSparkHub_v${{ env.APP_VERSION }}.dmg
          installer/AiSparkHub_v${{ env.APP_VERSION }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
