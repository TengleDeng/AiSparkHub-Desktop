name: Build macOS App

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build-macos:
    runs-on: macos-latest  # 使用最新的macOS runner
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyQt6 qtawesome PyInstaller pynput
        brew install create-dmg
        
    - name: Prepare app version
      id: app_version
      run: |
        # 如果是tag触发，使用tag作为版本号，否则使用日期作为版本号
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(date +'%Y.%m.%d')
        fi
        echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
      
    - name: Create icns icon
      run: |
        # 确保icons目录存在
        mkdir -p icons
        
        # 检查是否已有.icns格式图标
        if [ ! -f "icons/app.icns" ]; then
          echo "创建默认应用图标..."
          
          # 创建一个简单的彩色方块作为默认图标
          echo "创建默认PNG图标..."
          
          # 使用macOS自带的命令创建一个简单的16x16彩色方块图片
          mkdir -p AppIcon.iconset
          
          # 使用sips创建一个简单的彩色方块
          convert -size 1024x1024 xc:blue icons/app.png || {
            # 如果convert命令失败，尝试其他方法
            echo "无法使用convert创建图标，使用预定义颜色创建..."
            
            # 使用AppleScript创建一个简单的彩色图标
            osascript -e 'tell application "System Events" to tell application process "Finder" to set frontmost to true' || true
            osascript -e 'tell application "Preview" to make new document with properties {name:"icon.png", size:{1024, 1024}}' || true
            osascript -e 'tell application "Preview" to close window 1 saving in POSIX file "'"$(pwd)"'/icons/app.png"' || true
            
            # 如果上述方法也失败，直接创建一个空白文件
            [ -f "icons/app.png" ] || touch icons/app.png
          }
          
          # 使用预设的尺寸复制图标
          mkdir -p AppIcon.iconset
          
          # 简化版iconset创建，只创建必要的尺寸
          cp icons/app.png AppIcon.iconset/icon_16x16.png || touch AppIcon.iconset/icon_16x16.png
          cp icons/app.png AppIcon.iconset/icon_32x32.png || touch AppIcon.iconset/icon_32x32.png
          cp icons/app.png AppIcon.iconset/icon_128x128.png || touch AppIcon.iconset/icon_128x128.png
          cp icons/app.png AppIcon.iconset/icon_256x256.png || touch AppIcon.iconset/icon_256x256.png
          cp icons/app.png AppIcon.iconset/icon_512x512.png || touch AppIcon.iconset/icon_512x512.png
          
          # 尝试生成icns文件
          iconutil -c icns AppIcon.iconset || {
            echo "图标转换失败，创建空白icns文件..."
            # 创建一个空图标文件作为后备
            touch icons/app.icns
          }
          
          # 如果成功，移动到icons目录
          [ -f "AppIcon.icns" ] && mv AppIcon.icns icons/app.icns
          
          # 清理临时文件
          rm -rf AppIcon.iconset
        fi
        
    - name: Ensure main.py exists
      run: |
        # 如果main.py不存在，创建一个最小的main.py示例文件
        if [ ! -f "main.py" ]; then
          echo "创建示例main.py文件..."
          echo '#!/usr/bin/env python3' > main.py
          echo '# -*- coding: utf-8 -*-' >> main.py
          echo '' >> main.py
          echo 'import sys' >> main.py
          echo 'import os' >> main.py
          echo 'from PyQt6.QtWidgets import QApplication, QMainWindow, QLabel, QVBoxLayout, QWidget' >> main.py
          echo 'from PyQt6.QtCore import Qt' >> main.py
          echo '' >> main.py
          echo 'class MainWindow(QMainWindow):' >> main.py
          echo '    def __init__(self):' >> main.py
          echo '        super().__init__()' >> main.py
          echo '        self.setWindowTitle("AiSparkHub")' >> main.py
          echo '        self.setMinimumSize(800, 600)' >> main.py
          echo '        ' >> main.py
          echo '        # 创建中央窗口部件' >> main.py
          echo '        central_widget = QWidget()' >> main.py
          echo '        self.setCentralWidget(central_widget)' >> main.py
          echo '        ' >> main.py
          echo '        # 创建布局' >> main.py
          echo '        layout = QVBoxLayout(central_widget)' >> main.py
          echo '        ' >> main.py
          echo '        # 添加标签' >> main.py
          echo '        label = QLabel("AiSparkHub - 欢迎使用!")' >> main.py
          echo '        label.setAlignment(Qt.AlignmentFlag.AlignCenter)' >> main.py
          echo '        label.setStyleSheet("font-size: 24px; font-weight: bold;")' >> main.py
          echo '        layout.addWidget(label)' >> main.py
          echo '        ' >> main.py
          echo '        # 添加说明' >> main.py
          echo '        info_label = QLabel("这是一个示例程序，用于测试macOS打包功能")' >> main.py
          echo '        info_label.setAlignment(Qt.AlignmentFlag.AlignCenter)' >> main.py
          echo '        layout.addWidget(info_label)' >> main.py
          echo '' >> main.py
          echo 'def main():' >> main.py
          echo '    app = QApplication(sys.argv)' >> main.py
          echo '    window = MainWindow()' >> main.py
          echo '    window.show()' >> main.py
          echo '    sys.exit(app.exec())' >> main.py
          echo '' >> main.py
          echo 'if __name__ == "__main__":' >> main.py
          echo '    main()' >> main.py
        fi
        
    - name: Build macOS application
      run: |
        # 运行build.py脚本构建.app和.dmg
        python build.py AiSparkHub ${{ env.APP_VERSION }}
        
    - name: Upload DMG artifact
      uses: actions/upload-artifact@v4
      with:
        name: AiSparkHub-macOS-${{ steps.app_version.outputs.version }}
        path: installer/AiSparkHub_v${{ env.APP_VERSION }}.dmg
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          installer/AiSparkHub_v${{ env.APP_VERSION }}.dmg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 