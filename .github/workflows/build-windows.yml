name: Build Windows App

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build-windows:
    runs-on: windows-latest  # 使用最新的Windows runner
    env:
      PYTHONIOENCODING: utf-8  # 设置Python IO编码为UTF-8
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyQt6 qtawesome PyInstaller pynput pillow
        
    - name: Install Inno Setup
      run: |
        choco install innosetup -y
        
    - name: Prepare app version
      id: app_version
      shell: bash
      run: |
        # 如果是tag触发，使用tag作为版本号，否则使用日期作为版本号
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(date +'%Y.%m.%d')
        fi
        echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
      
    - name: Ensure icon exists
      run: |
        # 确保icons目录存在
        if (-not (Test-Path "icons")) {
          New-Item -ItemType Directory -Path "icons" -Force
        }
        
        # 检查是否已有.ico格式图标
        if (-not (Test-Path "icons\app.ico")) {
          Write-Host "查找可用的图标文件..."
          # 检查是否有chatglm.ico或其他可用图标
          if (Test-Path "icons\chatglm.ico") {
            Copy-Item "icons\chatglm.ico" -Destination "icons\app.ico"
            Write-Host "使用发现的图标: icons\chatglm.ico"
          } else {
            # 如果没有可用图标，创建一个空图标文件作为占位符
            Write-Host "未找到可用图标，创建占位图标..."
            New-Item -ItemType File -Path "icons\app.ico" -Force
            Write-Host "已创建占位图标文件"
          }
        } else {
          Write-Host "图标文件已存在: icons\app.ico"
        }
    
    - name: Check main.py exists
      run: |
        if (-not (Test-Path "main.py")) {
          Write-Host "错误: main.py 文件不存在!"
          exit 1
        } else {
          Write-Host "找到main.py文件"
        }
        
    - name: Set console code page to UTF-8
      run: |
        # 设置控制台代码页为UTF-8
        chcp 65001
        
    - name: Create simplified build script
      run: |
        # 创建一个简化版的构建脚本，避免中文问题
        @"
        import os
        import sys
        import subprocess

        def main():
            try:
                app_name = "AiSparkHub"
                app_version = "${{ env.APP_VERSION }}"
                print(f"Starting build for {app_name} v{app_version}")
                
                # 调用原始build.py
                cmd = [sys.executable, "build.py", app_name, app_version]
                subprocess.check_call(cmd)
                
                print(f"Build completed successfully.")
                return 0
            except Exception as e:
                print(f"Error during build process: {e}")
                import traceback
                traceback.print_exc()
                return 1

        if __name__ == "__main__":
            sys.exit(main())
        "@ | Out-File -FilePath "build_wrapper.py" -Encoding utf8
        
    - name: Build Windows application
      run: |
        # 使用包装脚本运行构建过程
        python build_wrapper.py
        
    - name: Upload EXE artifact
      uses: actions/upload-artifact@v4
      with:
        name: AiSparkHub-Windows-${{ steps.app_version.outputs.version }}
        path: installer\AiSparkHub_v${{ env.APP_VERSION }}.exe
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          installer\AiSparkHub_v${{ env.APP_VERSION }}.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 